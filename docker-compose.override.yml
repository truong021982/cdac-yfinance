services:

  webserver:
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://postgres:postgres@postgres/postgres
      # https://astro-sdk-python.readthedocs.io/en/stable/configurations.html#configuring-the-max-memory-limit-for-a-dataframe-to-be-stored-in-xcom-table
      AIRFLOW__CORE__ALLOWED_DESERIALIZATION_CLASSES: airflow\.* astro\.*
    volumes:
      - ./include/data/dataset:/mnt
    networks:
      - ndsnet

  scheduler:
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://postgres:postgres@postgres/postgres
      # https://astro-sdk-python.readthedocs.io/en/stable/configurations.html#configuring-the-max-memory-limit-for-a-dataframe-to-be-stored-in-xcom-table
      AIRFLOW__CORE__ALLOWED_DESERIALIZATION_CLASSES: airflow\.* astro\.*
    volumes:
      - ./include/data/dataset:/mnt
    networks:
      - ndsnet

  triggerer:
    networks:
      - ndsnet

  dw:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres_db:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - ndsnet

  minio:
    image: minio/minio
    container_name: minio
    hostname: minio
    restart: always
    volumes:
      - ./include/data/minio:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ndsnet
  
  spark-master:
    image: airflow/spark-master
    build: ./spark/master
    container_name: spark-master
    ports:
      - "8082:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks:
      - ndsnet

  spark-worker:
    image: airflow/spark-worker
    build: ./spark/worker
    container_name: spark-worker
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - ndsnet

  mlflow-db:
    image: mysql:8-oracle # -oracle tag supports arm64 architecture!
    restart: unless-stopped
    container_name: mlflow_db
    expose:
      - "3306"
    environment:
      - MYSQL_DATABASE=mlflow
      - MYSQL_USER=mlflow
      - MYSQL_PASSWORD=mlflow
      - MYSQL_ROOT_PASSWORD=mlflow
    volumes:
      - mysql_db:/var/lib/mysql
    networks:
      - ndsnet

  mlflow:
    image: ubuntu/mlflow:2.1.1_1.0-22.04
    container_name: tracker_mlflow
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_DEFAULT_REGION=${AWS_REGION}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - MLFLOW_S3_IGNORE_TLS=true
    networks:
      - ndsnet
    # If we want to store on S3
#    entrypoint: mlflow server --backend-store-uri mysql+pymysql://mlflow:mlflow@mlflow-db:3306/mlflow --artifacts-destination s3://${AWS_BUCKET_NAME}/ --serve-artifacts -h 0.0.0.0
    entrypoint: mlflow server --backend-store-uri mysql+pymysql://mlflow:mlflow@mlflow-db:3306/mlflow --serve-artifacts -h 0.0.0.0
    depends_on:
      - mlflow-db

volumes:
  postgres_db:
  mysql_db:

networks:
  ndsnet:
    driver: bridge